/*
给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。
*/
//这道题自己做的时候没能做出来，就卡在了要判断每个节点的左右子树的高度，

//方法一：从顶至底(暴力法)
//看了sk的方法就是把每个节点的左右子树都算一下高度，算高度其实以前做过一道题，直接搬过来 就可以，所以就是用了两个递归，一个是得到当前节点的高度，一个是根据高度判断当前节点是不是平衡二叉树
/*
构造一个获取当前节点最大深度的方法 depth() ，通过比较左右子树最大高度差abs(self.depth(root.left) - self.depth(root.right))，来判断以此节点为根节点下是否是二叉平衡树；
从顶至底DFS，以每个节点为根节点，递归判断是否是平衡二叉树：
若所有根节点都满足平衡二叉树性质，则返回 True ；
若其中任何一个节点作为根节点时，不满足平衡二叉树性质，则返回False。
本方法产生大量重复的节点访问和计算，最差情况下时间复杂度 O(N^2)。
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(!root){
            return true;
        }
        int left_depth = GetDepth(root->left);
        int right_depth = GetDepth(root->right);
        if(abs(left_depth-right_depth)>1){
            return false;
        }
        else{
            return isBalanced(root->left)&&isBalanced(root->right);
        } 
    }

    int GetDepth(TreeNode* root){
        if(!root){
            return 0;
        }
        return max(GetDepth(root->left),GetDepth(root->right))+1;
    }       

};
//方法二：从底至顶(提前阻断法)
/*
对二叉树做深度优先遍历DFS，递归过程中：
终止条件：当DFS越过叶子节点时，返回高度0；
返回值：
从底至顶，返回以每个节点root为根节点的子树最大高度(左右子树中最大的高度值加1max(left,right) + 1)；
当我们发现有一例 左/右子树高度差 ＞ 1 的情况时，代表此树不是平衡树，返回-1；
当发现不是平衡树时，后面的高度计算都没有意义了，因此一路返回-1，避免后续多余计算。
最差情况是对树做一遍完整DFS，时间复杂度为 O(N)。
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return GetDepth(root)!=-1;
    }

    int GetDepth(TreeNode* root){
        if(!root){
            return 0;
        }
        int left = GetDepth(root->left);
        if(left==-1) return -1; //只要有子树是-1证明不平衡，那后面的判断就没必要了
        int right = GetDepth(root->right);
        if(right==-1) return -1;
        if((abs(left-right))<=1){
            return max(left,right)+1;//如果左子树的高度和右子树的高度差的绝度值不超过1，则是平衡二叉树，就返回当前节点的高度，
        }
        else{
            return -1;//否则就返回-1证明不是平衡二叉树了,然后他后面的节点就都返回-1
        }
    }       

};
