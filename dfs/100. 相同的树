/*
给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false
*/

//方法一：自己的方法
//只要两个数不同步，就cnt++，最后cnt不等于零，则两个数不是相同的数
//不同步就是一个是null一个不是null或者值不一样
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    
    bool isSameTree(TreeNode* p, TreeNode* q) {
        //vector<int>p1;
        //vector<int>q1;
        int cnt=0; //只要p和q有不同步的情况就cnt++
        dfs(p,q,cnt);
        if(cnt){
            return false;
        }
        else{
            return true;
        }
        
    }
    void dfs(TreeNode* p,TreeNode* q,int &cnt){
        if(p==NULL&&q==NULL){
            return ;
        }
        else if(p==NULL || q==NULL){ //p和q的值不同
            cnt++;
            return ;
        }
        
        if(p->val!=q->val){ //p和q的值不同
            cnt++;
        }

        if(p->left==NULL && p->right==NULL && q->left==NULL && q->right==NULL){//p和q都是叶节点 返回
            return ;
        }
        
        dfs(p->left,q->left,cnt);
        dfs(p->right,q->right,cnt);

    }
};

//方法二：题解
/*
最简单的策略是使用递归。首先判断 p 和 q 是不是 None，然后判断它们的值是否相等。
若以上判断通过，则递归对子结点做同样操作。

其实思路和方法一一样，但是方法二直接在原来的函数递归，遇到不满足的就直接返回了
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL){
            return true;
        }
        if(p==NULL||q==NULL){
            return false;
        }
        if(p->val!=q->val){
            return false;
        }
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
        
    }

};
