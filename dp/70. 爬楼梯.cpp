/*
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

*/

//方法一：动态规划

/*
不难发现，这个问题可以被分解为一些包含最优子结构的子问题，即它的最优解可以从其子问题的最优解来有效地构建，我们可以使用动态规划来解决这一问题。

第 i 阶可以由以下两种方法得到：

在第 (i-1) 阶后向上爬一阶。

在第 (i-2) 阶后向上爬 2 阶。

所以到达第 i 阶的方法总数就是到第 (i−1) 阶和第 (i−2) 阶的方法数之和。

令 dp[i] 表示能到达第 i 阶的方法总数：

dp[i]=dp[i−1]+dp[i−2]

*/
class Solution {
public:
    int climbStairs(int n) {
        int dp[n+1]={0};
        for(int i=0;i<=n;i++){
            if(i<=1){ //base case
                dp[i] = 1;
                continue;
            }
            dp[i] = dp[i-1]+dp[i-2]; //到达第i阶的方法数=到达第i-1阶的方法+到达第i-2阶的方法
        }
        return dp[n];
    }
};
//20.6.13刷到每日一题的方法
class Solution {
public:
    int climbStairs(int n) {
        int dp[n+1];//爬到当前楼梯的方法

        dp[0]=1;
        dp[1] =1;
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1]+dp[i-2]; //到达第i阶的方法数等于第i阶的方法数加上本阶的方法数
        }
        
        return dp[n];
    }
};
