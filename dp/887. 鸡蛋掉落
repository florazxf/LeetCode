/*
你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。

每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。

你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。

每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。

你的目标是确切地知道 F 的值是多少。

无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

示例 1：

输入：K = 1, N = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
如果它没碎，那么我们肯定知道 F = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。


示例 2：
输入：K = 2, N = 6
输出：3


示例 3：
输入：K = 3, N = 14
输出：4

提示：
1 <= K <= 100
1 <= N <= 10000

*/

//方法一：超时
/*
dp[N][K] 表示当前状态为k个鸡蛋，面对n层楼，这个状态下最少的扔鸡蛋次数
               
res = min(res, //至少扔鸡蛋的次数
         max(dp[i-1][j-1], //碎  max是选最坏的情况
         dp[i][j+1])+1 //没碎
       );
用二分搜索优化
*/
class Solution {
public:
    int superEggDrop(int K, int N) {

        vector<vector<int>>dp(N+1,vector<int>(K+1,0));
        //base case
        for(int j=1;j<=K;j++){ //楼层数为1，不管有多少鸡蛋都只用扔一次
            dp[1][j] = 1;
        }
        for(int i=1;i<=N;i++){//鸡蛋数为1，只能线性扫描所有楼层
            dp[i][1] = i;
        }

        //状态转移
     
        for(int i=2;i<=N;i++){
            for(int j=2;j<=K;j++){

                dp[i][j] = binary_valley(i,j,dp); //用二分搜索查找最小值
            }
        }
        return dp[N][K];

    }

        int binary_valley(int floors, int eggs, vector<vector<int>>& dp){
            int l=1;
            int r = floors;
            while(l<r){
                int LMid = l+(r-1)/2;
                int broken  = dp[LMid-1][eggs-1];
                int not_broken = dp[floors-LMid][eggs];
                if(not_broken>broken){
                    l=LMid+1;
                }
                else 
                    r = LMid;
            }
            return max(dp[r-1][eggs-1],dp[floors-r][eggs])+1;
        }

};

//方法二：
/**
重新定义状态转移
之前dp[k][n] = m，表示有k个鸡蛋，N层楼，让求最坏情况下最少测试次数m。 这样要穷举
换成dp[k][m] = n，表示有k个鸡蛋，测试m次，最坏情况下最多能测试N层楼。

状态转移方程：
1、无论你在哪层楼扔鸡蛋，鸡蛋只可能摔碎或者没摔碎，碎了的话就测楼下，没碎的话就测楼上。
2、无论你上楼还是下楼，总的楼层数 = 楼上的楼层数 + 楼下的楼层数 + 1（当前这层楼）。
根据这个特点，可以写出下面的状态转移方程：
dp[k][m] = dp[k][m - 1] + dp[k - 1][m - 1] + 1

dp[k][m - 1] 就是楼上的楼层数，因为鸡蛋个数 k 不变，也就是鸡蛋没碎，扔鸡蛋次数 m 减一；
dp[k - 1][m - 1] 就是楼下的楼层数，因为鸡蛋个数 k 减一，也就是鸡蛋碎了，同时扔鸡蛋次数 m 减一。
PS：这个 m 为什么要减一而不是加一？之前定义得很清楚，这个 m 是一个允许的次数上界，而不是扔了几次。
*/

class Solution {
    public int superEggDrop(int K, int N) {
        int[][]dp = new int[K+1][N+1];//dp[i][j] 是有i个鸡蛋，可以尝试扔m次鸡蛋 因为m最多不会超过N次（线性扫描）
        //确定当前的鸡蛋个数和最多允许的扔鸡蛋次数，就能确定F的最高楼层数
        int m=0;
        while(dp[K][m]<N){//题目是给K个鸡蛋，N层楼，让求最坏情况下最少测试次数m。我们是给K个鸡蛋，测试m次，最坏情况下最多能测试N层楼
            m++;
            for(int k=1;k<=K;k++){
                //状态转移
                dp[k][m] = dp[k-1][m-1]+dp[k][m-1]+1;//楼上楼层数+楼下楼层数+本层
            }
        }
        return m;
        
    }
}

//方法三： 方法二的空间压缩
/**
dp[k][m]的状态转移方程的m值和m-1有关 dp暂存上一行的值 所以只需要一维即可
*/
class Solution{
    public int superEggDrop(int K,int N){
        int[]dp = new int[K+1];
        int m=0;
        while(dp[K]<N){
            m++;
            for(int k=K;k>0;k--){
                dp[k]=dp[k-1]+dp[k]+1;
            }
        }
        return m;
    }
}
