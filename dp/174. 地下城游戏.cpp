/*
一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

为了尽快到达公主，骑士决定每次只向右或向下移动一步。

 

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)
*/

//方法一：动态规划 
/*
有右下角到左上角 dp[i][j]表示从(i,j)到终点所需的最小初始值
那这个所需最小初始值就只和他自己的值dungeon[i][j]还有选向右走还是向下走，当然是选min(dp[i+1][j],dp[i][j+1])

注意不能从左上到右下角，这样对每条路径我们需要记录 从出发点到当前点的路径和以及从出发点到当前点所需的最小初始值。而从右下角到左上角就无需关心路径和的问题
*/

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {

        
        int m = dungeon.size();
        int n = dungeon[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,INT_MAX)); //dp[i][j] 当前需要的最小的初始值
        dp[m][n-1] = dp[m-1][n] = 1;
        for(int i = m-1;i>=0;--i){
            for(int j=n-1;j>=0;--j){
                
                int minn = min(dp[i+1][j],dp[i][j+1]);//从右和下选需要的最小初始值小的那个
                dp[i][j] = max(minn-dungeon[i][j],1);//自己所需的最小初始值，初始值必须大于等于1
            }
        }
        return dp[0][0];

    }
};
