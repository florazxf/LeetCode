/*
爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？

示例 1：

输入：N = 10, K = 1, W = 10
输出：1.00000
说明：爱丽丝得到一张卡，然后停止。
示例 2：

输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。
在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：

输入：N = 21, K = 17, W = 10
输出：0.73278
提示：

0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。

*/


//方法一：动态规划
/*
https://leetcode-cn.com/problems/new-21-game/solution/huan-you-bi-zhe-geng-jian-dan-de-ti-jie-ma-tian-ge/

假设dp[x]为她手上牌面为x时，能获胜的概率，那么这个概率应该是：
dp[x]=1/w * (dp[x+1]+dp[x+2]+dp[x+3]...+dp[x+w])
因为抽取的牌面机会都是均等的，她能抽取的面值在[1,W]之间，所以将概率之和平均一下就是dp[x]的概率。
x最多能到K-1，因为当大于等于K时，爱丽丝会停止抽牌，所以当游戏结束时，即爱丽丝停止抽牌时，她可能达到的最大牌面是K+W-1，而一开始她的牌面是0，所以我们用一个长度为K+W的dp数组来保存她在所有面值下的胜率。
最后dp[0]，也就是最开始爱丽丝还没有抽牌，她的牌面为0时的胜率，这个就是我们的答案。

我将这个格子分成了2部分[0,K-1]和[K,K+W-1]，区别就是[0,K-1]爱丽丝可以抽牌，[K,K+W-1]时不能抽牌，那么不能抽牌时她获胜的概率是多少呢，很显然牌面小于等于N时，概率就是1，大于N概率就是0

用一个s变量来保存累加结果，而下一轮只是减去右边的格子，加上左边的格子即可
*/

class Solution {
public:
    double new21Game(int N, int K, int W) {

        double dp[K+W]; //手中牌为x时dp[x]为获胜概率
        double s=0;
        //手中牌为K到K+W-1，如果小于等于N 获胜概率为1，大于N获胜概率为0
        for(int i=K;i<=K+W-1;i++){
            if(i<=N){
                dp[i] = 1;
                s++;
            }
            else{
                dp[i] = 0;
            }
            
        }

        //手中牌为0到K-1 ，可以抽牌 
        //获胜的概率为dp[x] = 1/w*(dp[x+1]+dp[x+2]+...+dp[x+w])
        
        for(int i=K-1;i>=0;i--){
            
            dp[i] = s/W;  //s为从dp[K]到dp[K+W]的和
            s = s - dp[i+W]+dp[i]; //每向左移一个 就把最右边的减去，最左边的加上
            
        }

        return dp[0];

    }
};
