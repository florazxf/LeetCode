/*
给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。

在 S 上反复执行重复项删除操作，直到无法继续删除。

在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

示例：

输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

提示：

1 <= S.length <= 20000
S 仅由小写英文字母组成。
*/
//note：这个题直接用栈的在LeetCode里过不去，超出内存限制

//方法一：原地算法
//其实就是栈的思想，只不过不用栈，而是用top直接在String上修改
class Solution {
public:
    string removeDuplicates(string S) {
        int top = 0;
        for (char ch : S) {
            if (top == 0 || S[top - 1] != ch) {
                S[top++] = ch;
            } else {//当前top索引的值和前一个top索引的值相等，则前一个位置的元素删除，、
                top--; //相当于出栈
            }
        }
        //top是我们删减后的字符串的末尾索引
        S.resize(top);// resize调整容器中有效数据区域的尺寸,如果尺寸变小就把后面的截掉
        return S;
    }
};
