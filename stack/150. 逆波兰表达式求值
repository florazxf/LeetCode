/*
根据逆波兰表示法，求表达式的值。
有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：
整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
*/

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        int a;
        int b;
        stack<int> tmp;
        for(int i=0;i<tokens.size();i++){
            
            if(tokens[i]=="+" || tokens[i]=="-" || tokens[i]=="*" || tokens[i]=="/"){ //是操作数就对栈顶的前两个数操作，将结果入栈

                a = tmp.top();
                tmp.pop();
                b = tmp.top();
                tmp.pop();
                if(tokens[i]=="+"){
                    tmp.push(a+b); 
                }
                else if(tokens[i]=="-"){
                    tmp.push(b-a);
                }
                else if(tokens[i]=="/"){
                    tmp.push(b/a);
                }
                else if(tokens[i]=="*"){
                    tmp.push(b*a);
                }
                
            }
            else{ //数
                tmp.push(stoi(tokens[i])); 
                                                        
            }
            
                                                
         
        }
        if(!tmp.empty()){ //最后栈中剩下的数就是结果
            a = tmp.top();
            tmp.pop();
            return a;
            
        }
        
        return 0; //最后要记得return
    }
};
