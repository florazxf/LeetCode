/*
有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

示例 1：
输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

示例 2：
输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。

示例 3：
输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
*/

//方法一：遇到左括号入栈，遇到右括号出栈，如果栈为空说明找到原语

class Solution {
public:
    string removeOuterParentheses(string S) {
        stack<char>tmp;
        string s_new="";
        bool flag=false; //找到原语
        int start; //原语的开始位置
        int end;//原语结束位置
        for(int i=0;i<S.size();i++){
            
            if(S[i]=='('){ //遇到左括号入栈
                tmp.push(S[i]);
                if(!flag){
                    start = i; //原语的开始位置
                    flag = true;
                }
            }
            else{  //遇到右括号出栈
                tmp.pop();
                if(tmp.empty()){
                    end = i;   //原语结束位置
                    s_new = s_new+S.substr(start+1,end-start-1);
                    flag = false;
                }
            }
            
        }
        return s_new;
    }   
};


//方法二：
class Solution {
public:
    string removeOuterParentheses(string S) {
        stack<char>tmp;
        string s_new="";

        for(int i=0;i<S.size();i++){
            
            if(S[i]==')'){
                tmp.pop();
            }
            if(!tmp.empty()){
                s_new = s_new+S[i]; //只要当前栈不为空就证明是要的S[i]
            }
            if(S[i]=='('){
                tmp.push('(');
            }
        }
        return s_new;
    }   
};

// 方法三：不用栈，判断左右括号数量 这种方法比用栈的时间快很多
 class Solution {
public:
    string removeOuterParentheses(string S) {
        int L=1;//左括号的数量
        int R=0;//右括号的数量
        string ans;
        for(int i=1;i<S.size();i++){
            if(S[i]=='(')
                L++;
            else 
                R++;
            if(R!=L) 
                ans.push_back(S[i]);
            else {   //左括号数量和右括号数量相等时，一个原语结束
                i++;  // 把每个原语初始的左括号跳过，所以L的初始值为1
                L=1;
                R=0;
            }
        }
        return ans;
    }
};
