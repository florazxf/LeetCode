/*
给定有效字符串 "abc"。

对于任何有效的字符串 V，我们可以将 V 分成两个部分 X 和 Y，使得 X + Y（X 与 Y 连接）等于 V。（X 或 Y 可以为空。）那么，X + "abc" + Y 也同样是有效的。

例如，如果 S = "abc"，则有效字符串的示例是："abc"，"aabcbc"，"abcabc"，"abcabcababcc"。无效字符串的示例是："abccba"，"ab"，"cababc"，"bac"。

如果给定字符串 S 有效，则返回 true；否则，返回 false。

示例 1：

输入："aabcbc"
输出：true
解释：
从有效字符串 "abc" 开始。
然后我们可以在 "a" 和 "bc" 之间插入另一个 "abc"，产生 "a" + "abc" + "bc"，即 "aabcbc"。

*/


//方法一：栈

class Solution {
public:
    bool isValid(string S) {
        stack<char>tmp;
        for(int i=0;i<S.size();i++){
            if(S[i]=='c'){ //针对字母c,当前字母为c时,就pop b and pop a,如果能正常执行,则无误,反之则有错;
                if(tmp.empty() || tmp.top()!='b'){
                    return false;
                }
                tmp.pop();
                if(tmp.empty()||tmp.top()!='a'){
                    return false;
                }
                tmp.pop();
                
            }
            else{
                tmp.push(S[i]);
            }

        }
        
        return tmp.empty(); //判断栈是否为空
        
    }
};
