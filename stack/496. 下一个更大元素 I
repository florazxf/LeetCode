/*
给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。
示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。
    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。
    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。

示例 2:

输入: nums1 = [2,4], nums2 = [1,2,3,4].
输出: [3,-1]
解释:
    对于num1中的数字2，第二个数组中的下一个较大数字是3。
    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。

注意:

nums1和nums2中所有元素是唯一的。
nums1和nums2 的数组大小都不超过1000。
*/

//方法一：自己的方法
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
        stack<pair<int,int>> tmp; //first是值，second是索引
        vector<int> a;//存放nums2下一个最大元素的值
        vector<int> res;//存放nums1下一个最大元素的值
        
        for(int i=0;i<nums2.size();i++){ //找到nums2中每个元素的下一个更大元素，放到vector a中
            a.push_back(-1);
            
            while(!tmp.empty() &&nums2[i]>tmp.top().first){
                
                a[tmp.top().second] = nums2[i];
                tmp.pop();//找到了下一个最大元素即出栈
                
            }
            
            tmp.push(make_pair(nums2[i],i));
            

        }
        
        for(int i=0;i<nums1.size();i++){
            for(int j=0;j<nums2.size();j++){
                if(nums1[i]==nums2[j]){ //从nums2中找到nums1中相应的元素
                    res.push_back(a[j]); //a中对应值即nums2中下一个最大元素
                    break;
                }
            }
        }
        
        return res;
        
    }
};


//方法二：用hashmap来存储
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
        stack<int> tmp;
        map<int,int> hash; //first是nums2中有下一个最大值的元素，second是这个元素的最大值
        vector<int> res;
        
        for(int i=0;i<nums2.size();i++){ //找到nums2中每个元素的下一个更大元素，
            
            while(!tmp.empty() &&nums2[i]>tmp.top()){
                hash.insert(pair<int,int>(tmp.top(),nums2[i]));//hash表存储当前元素和它对应的下一个最大元素
                tmp.pop();//找到了下一个最大元素即出栈
                
            }

            tmp.push(nums2[i]);

        }
        
        for(int i=0;i<nums1.size();i++){
            iter1 = hash.find(nums1[i]);
            if(iter1->second!=0){  
                res.push_back(iter1->second);
            } 
            else{    //没找到下一个最大元素
                res.push_back(-1);
            }
            
        }
        
        return res;
        
    }
};
