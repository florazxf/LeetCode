/*
给定一个链表（链表结点包含一个整型值）的头结点 head。
同时给定列表 G，该列表是上述链表中整型值的一个子集。
返回列表 G 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 G 中）构成的集合。

输入: 
head: 0->1->2->3
G = [0, 1, 3]
输出: 2
解释: 
链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。

link：https://leetcode-cn.com/problems/linked-list-components/
*/

//方法一：使用hash，来查找G数组中，是否存在链表中的某个值，能提高效率
//使用find 找组件的头，使用meet找组件的尾
class Solution {
public:
    int numComponents(ListNode* head, vector<int>& G) {
        
        ListNode *p = head;
        int count=0;//组件的个数
        set<int> g;//建立一个hash集合存储G中的元素
        bool find = false; //表示当前在g中找到了 
        bool meet = false;  //表示之前在g中找到了，为了找到组件的尾
        //只有当find为false meet为true count才++ ，
        
        for(int i=0;i<G.size();i++){
            g.insert(G[i]);
        }
        while(p){
            if(g.count(p->val)){
                find = true;
            }
            if(find){ //find为true代表找到了一个组件
                find = false;  //重新初始化find
                meet = true;   
            }
            else{  
                if(meet){ //找到了组件的尾
                    count++;
                    meet = false;//重新初始化meet
                }
               
            }
            p = p->next;
        }
        //链表的最后一个元素在G中的情况
            if(meet){ 
                    count++;
                }
        return count;
        
    }
};

//方法二：自己想的,效率很低
//遍历结点，查看当前结点的值是否在G中，如果在就继续看下一个结点在不在，直到当前结点不在G中了，说明已经到了当前组件的尾端了，组件书目count++；
class Solution {
public:
    int numComponents(ListNode* head, vector<int>& G) {
        ListNode *p = head;
        int count = 0;
        int flag=0;
        while(p){
            for(int i=0;i<G.size();i++)//size()容器中实际数据个数 
                {
                    if(p->val==G[i])  //在G中找到了当前结点的值
                    {
                        flag=1;
                        if(p->next==NULL){
                            count++;
                            return count;
                        }
                        p=p->next;
                        i=-1;
                    }
                }
            if(flag==1){count++; flag=0;} //到当前组件的尾端了
            p = p->next;                
            }
        return count;
    }
};
