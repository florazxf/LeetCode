/*
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。

请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL
*/

//思路：奇数位置的结点放一个链表里，偶数位置的结点放一个链表里，然后把偶数的链表连到奇数的后面

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        
        if(head==NULL or head->next==NULL or head->next->next==NULL){return head;} //两个以下结点都不需要重排
        ListNode *p1 = new ListNode(0);
        ListNode *p2 = new ListNode(0);
        ListNode *ji = new ListNode(0);
        int i=1;
        p1 = head;
        p2 = p1->next;
        ji = p2; //偶数位置的头结点ji
        while(p2->next!=NULL and p1->next!=NULL){
            if(i%2!=0){  //奇数位置的结点
                p2 = p1->next;
                p1->next = p1->next->next;
                
            }
            else{ //偶数位置的结点
                p1 = p2->next;
                p2->next = p2->next->next;
            } 
            i = i+1;
        }
        p1->next = ji; //把偶数链和奇数链连起来
        return head;
        
    }
};
