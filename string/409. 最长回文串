/*
给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。

在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。

注意:
假设字符串的长度不会超过 1010。

示例 1:

输入:
"abccccdd"

输出:
7

解释:
我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。

*/

//方法一：自己的方法
//能构成回文串证明除了最中间的字母个数可以是1，其它的字母个数都为2，那么我们就记每个字母出现的个数，只要数量为2就将ans++
class Solution {
public:
    int longestPalindrome(string s) {
        vector<int> hash(256,0);
        int ans=0;
        for(int i=0;i<s.size();i++){
            hash[s[i]]++; //那么我们就记每个字母出现的个数
            if(hash[s[i]]==2){//只要数量为2就将ans++
                hash[s[i]]=0;
                ans++;    
            }
        }
        for(int i=0;i<s.size();i++){//只要有一个字母出现一次，那么可以作为最中间的字母
            if(hash[s[i]]==1){
                return ans*2+1; //奇数回文串
            }
        }

        return ans*2; //偶数回文串
    }
};

//方法二：题解的方法
//思路是一样的，但是题解是先计数，再遍历hash表计数
class Solution {
public:
    int longestPalindrome(string s) {
        vector<int> hash(128,0);
        int ans=0;
        for(int i=0;i<s.size();i++){
            hash[s[i]]++; //记每个字母出现的次数
        }

        for(int v=0;v<hash.size();v++){
            ans+=hash[v]/2*2; 
            if(hash[v]%2!=0 && ans%2==0){ //判断是否存在回文串中心，后面是为了避免重复判断
                ans++;
            }
        }

        return ans; //偶数回文串
    }
};
