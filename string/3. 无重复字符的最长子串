/*
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

*/
//思路：遍历每一个字母，找到其最长不重复子串

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        string res="";
        int cnt=1;
        int bestcnt = 1;
        int jsize;
        stack<char>tmp;
        int j;
        int current=0;//遍历每一个字母的最大子串
        if(s==""){
            return 0;
        }
        for(int i=0;i<s.size();i++){
            if(i==0){
                res+=s[i];
            }
            else{ 
                for(j=0;j<res.size();j++){
                    jsize = res.size();
                    if(s[i]==res[j]){ //找到重复的
                        if(cnt>bestcnt) bestcnt = cnt;
                        cnt = 1;
                        current +=1; //找下一个字母的最大子串
                        res="";
                        res+=s[current]; //res为新的开始
                        i = current;
                        break;
                    }
                }
                if(j==jsize){  //没有找到重复的
                    res+=s[i];
                    cnt++;
                }
            }
            
        }
        if(cnt>bestcnt){bestcnt = cnt;}
        
        return bestcnt;
        
    }
};
